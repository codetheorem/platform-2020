# This is a basic workflow to help you get started with Actions
name: Deploy all backend services when job is triggered manually

# Controls when the action will run (manually, and only from master)
on:
  repository_dispatch:
    branches:
      - master

# Deploy our 5 services in parallel (build info is taken from the other jobs)
# Ideally, we'd just trigger the other jobs, but it looks like there's no first-party support for that.
jobs:
  lambda-deploy-admin:
    name: Deploy admin lambda functions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: switch to admin dir
      run: |
        cd backend/admin
        npm ci
   
    - name: serverless deploy admin service
      uses: serverless/github-action@master
      with:
        args: deploy -s stage
        entrypoint: backend/admin
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  lambda-deploy-projects:
    name: Deploy projects lambda functions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: switch to projects dir
      run: |
        cd backend/projects
        npm ci
   
    - name: serverless deploy projects service
      uses: serverless/github-action@master
      with:
        args: deploy -s stage
        entrypoint: backend/projects
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  lambda-deploy-schedule:
    name: Deploy schedule lambda functions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: switch to schedule dir
      run: |
        cd backend/schedule
        npm ci
   
    - name: serverless deploy schedule service
      uses: serverless/github-action@master
      with:
        args: deploy -s stage
        entrypoint: backend/schedule
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  lambda-deploy-teams:
    name: Deploy teams lambda functions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: switch to teams dir
      run: |
        cd backend/teams
        npm ci
   
    - name: serverless deploy teams service
      uses: serverless/github-action@master
      with:
        args: deploy -s stage
        entrypoint: backend/teams
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  lambda-deploy-users:
    name: Deploy users lambda functions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: switch to user dir
      run: |
        cd backend/users
        npm ci
   
    - name: serverless deploy users service
      uses: serverless/github-action@master
      with:
        args: deploy -s stage
        entrypoint: backend/users
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
