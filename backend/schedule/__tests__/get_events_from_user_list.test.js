// tests for add_event_to_user_list
// Generated by serverless-jest-plugin

const jestPlugin = require('serverless-jest-plugin');
const mod = require('../handler');

const { lambdaWrapper } = jestPlugin;
const adder = lambdaWrapper.wrap(mod, { handler: 'add_event_to_user_list' });
const wrapped = lambdaWrapper.wrap(mod, { handler: 'get_events_from_user_list' });

const insert_event = {
  body: JSON.stringify({
    event_id: '8378', // phone number code for 'test' B)
    user_id: 'j45kg45v4-454j3',
  }),
};

describe('get_events_from_user_list', () => {
  beforeAll((done) => {
    done();
  });

  it('Correctly fails on a bad request', () => {
    const bodyStub = {};

    const event = {};

    return wrapped.run(event).then((response) => {
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 500);
    });
  });

  it('Correctly returns a users list of events', async () => {
    // Add an event into the DB
    const response = await adder.run(insert_event);

    const event = {
      queryStringParameters: { user_id: 'j45kg45v4-454j3' },
    };

    // Check to make sure our fancy event id was returned by endpoint
    return await wrapped.run(event).then(async (response) => {
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 200);
      // expect(JSON.parse(response.body).event_ids).toContain('8378');
    });
  });

  it('Correctly rejects a response without an id', () => {
    const event = {
      body: JSON.stringify({}),
    };

    return wrapped.run(event).then(async (response) => {
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 500);
    });
  });
});
