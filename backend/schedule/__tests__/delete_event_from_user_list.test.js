// tests for delete_event_to_user_list
// Generated by serverless-jest-plugin

const mod = require('../handler');

const jestPlugin = require('serverless-jest-plugin');

const { lambdaWrapper } = jestPlugin;
const adder = lambdaWrapper.wrap(mod, { handler: 'add_event_to_user_list' });
const wrapped = lambdaWrapper.wrap(mod, { handler: 'delete_event_from_user_list' });

const AWS = require('aws-sdk');

const insert_event = {
  body: JSON.stringify({
    event_id: '5',
    user_id: 'j32kg32v3-323j2',
  }),
};

describe('delete_event_from_user_list', () => {
  beforeAll((done) => {
    done();
  });

  it('Correctly removes an entry that exists', async () => {
    // Add an event into the DB
    const response = await adder.run(insert_event);

    const { id } = JSON.parse(response.body); // store the returned id

    const event = {
      body: JSON.stringify({ id }),
    };

    return await wrapped.run(event).then(async (response) => {
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 200);

      // Check to see if item was actually deleted
      const ddb = new AWS.DynamoDB.DocumentClient();

      const getRequest = {
        TableName: process.env.USER_EVENTS_TABLE,
        Key: { id },
      };

      const result = await ddb.get(getRequest).promise();
      expect(result).toMatchObject({});
    });
  });

  it('Correctly rejects a response without an id', () => {
    const event = {
      body: JSON.stringify({}),
    };

    return wrapped.run(event).then(async (response) => {
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 500);
    });
  });
});
