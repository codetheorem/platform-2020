org: technica
app: platform-schedule
service: platform-schedule

provider:
  name: aws
  region: us-east-1
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  environment:
    SCHEDULE_TABLE: ${file(./config/${self:provider.stage}.json):SCHEDULE_TABLE}
    USER_EVENTS_TABLE: ${file(./config/${self:provider.stage}.json):USER_EVENTS_TABLE}
    SHORTLINKS_TABLE: ${file(./config/${self:provider.stage}.json):SHORTLINKS_TABLE}
    SHORTLINK_CLICKS_TABLE: ${file(./config/${self:provider.stage}.json):SHORTLINK_CLICKS_TABLE}
    ZOOM_API_EMAIL_ACCOUNT: ${file(./config/${self:provider.stage}.json):ZOOM_API_EMAIL_ACCOUNT}
    ZOOM_LINK_TABLE: ${file(./config/${self:provider.stage}.json):ZOOM_LINK_TABLE}
    ZOOM_API_KEY_SECRET_NAME: ${file(./config/${self:provider.stage}.json):ZOOM_API_KEY_SECRET_NAME}
    STAGE: ${self:provider.stage}
    PLATFORM_BASE_URL: ${file(./config/${self:provider.stage}.json):PLATFORM_BASE_URL}
    ZOOM_API_KEYS_TABLE: ${file(./config/${self:provider.stage}.json):ZOOM_API_KEYS_TABLE}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*"
    - Effect: "Allow"
      Action:
        - secretsmanager:DescribeSecret
        - secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-east-1:*"

functions:
  get_schedule:
    handler: handler.get_schedule
    description: Retrieves all schedule data from database
    events:
      - http: 
          path: schedule
          method: get
          cors: true
  get_event:
    handler: handler.get_event
    description: Retrieves single schedule event from database
    events:
      - http: 
          path: get_event
          method: get
          cors: true
  add_event:
    handler: handler.add_event
    description: Adds a new schedule event to the database
    events:
      - http: 
          path: add_event
          method: post
          cors: true
  update_event:
    handler: handler.update_event
    description: Updates an existing schedule event to the database
    events:
      - http: 
          path: update_event
          method: post
          cors: true
  delete_event_from_schedule:
    handler: handler.delete_event_from_schedule
    description: Deletes an existing schedule event from the database
    events:
      - http:
          path: delete_event_from_schedule
          method: post
          cors: true
  add_event_to_user_list:
    handler: handler.add_event_to_user_list
    description: Adds a new schedule event to the a user's list
    events:
      - http: 
          path: add_event_to_user_list
          method: post
          cors: true
  delete_event_from_user_list:
    handler: handler.delete_event_from_user_list
    description: Deletes a schedule event from a user's list
    events:
      - http:
          path: delete_event_from_user_list
          method: post
          cors: true
  add_shortlink:
    handler: handler.add_shortlink
    description: Adds a unique shortlink to the database
    events:
      - http:
          path: add_shortlink
          method: post
          cors: true
  get_shortlink:
    handler: handler.get_shortlink
    description: Gets a shortlink from the database
    events:
      - http:
          path: get_shortlink
          method: get
          cors: true        
  add_shortlink_click:
    handler: handler.add_shortlink_click
    description: Adds a shortlink click event to the database
    events:
      - http:
          path: add_shortlink_click
          method: post
          cors: true
  get_events_from_user_list:
    handler: handler.get_events_from_user_list
    description: Retrieves all schedule events added to the user's list
    events:
      - http:
          path: get_events_from_user_list
          method: get
          cors: true
  create_zoom_meeting:
    handler: handler.create_zoom_meeting
    description: Gets a zoom meeting and adds to database
    events:
      - http:
          path: create_zoom_meeting
          method: post
          cors: true

plugins:
  - serverless-sentry
  - serverless-jest-plugin

custom:
  sentry:
    dsn: ${file(./config/${self:provider.stage}.json):SENTRY_DSN}
  # see https://github.com/nordcloud/serverless-jest-plugin
  jest:
    collectCoverage: true