'use strict';

// tests for update_project_submission
// Generated by serverless-jest-plugin

const mod = require('./../handler');

const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'update_project_submission' });
const adder = lambdaWrapper.wrap(mod, { handler: 'create_project_submission' });
const devpost_link_table = process.env.DEVPOST_LINK_TABLE;

const event_body = {
    team_id: 'ABCD',
    team_name: 'the greatest team',
    devpost_link: 'devpost.com/dev',
}

const event = {
  body: JSON.stringify(event_body),
};

describe('update_project_submission', () => {
  beforeAll((done) => {
    done();
  });

  it('Correctly updates a project submission in the database', async() => {
    const added = await adder.run(event);
    const myId = JSON.parse(added.body).id.S; // Gets the id from the original post request (.S is because there is another object inside)
    const update_submission = {
      body: JSON.stringify({
        id: myId,
        team_name: 'the best team',
      }),
    }; // The update we want to make

    return await wrapped.run(update_submission).then(async (response) => {
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 200);

      //Below checks if the submission is updated
      const AWS = require('aws-sdk');
      const ddb = new AWS.DynamoDB.DocumentClient();

      const request = {
        TableName: devpost_link_table,
        Key: {
          id: myId,
        },
      };

      const result = await ddb.get(request).promise();
      const changed_name = 'the best team';

      expect(result.Item.team_name).toMatch(changed_name); // See if changed has changed
      expect(result.Item.team_id).toMatch(event_body.team_id); // See if the team_id we weren't changing has changed
      expect(result.Item.devpost_link).toMatch(event_body.devpost_link); // See if the devpost_link we weren't changing has changed
    });
  });
});