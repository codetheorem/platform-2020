'use strict';

// tests for get_active_mentorship_requests
// Generated by serverless-jest-plugin

const mod = require('./../handler');

const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const adder = lambdaWrapper.wrap(mod, { handler: 'create_mentorship_request' });
const getter = lambdaWrapper.wrap(mod, { handler: 'get_active_mentorship_requests' });
const getter_user = lambdaWrapper.wrap(mod, { handler: 'get_user_mentorship_requests' });
const updater = lambdaWrapper.wrap(mod, { handler: 'update_mentorship_request' });

let request = {
  body: JSON.stringify({
      user_id: "andrew",
      title: "I need help with Java!",
      description: "Java is a terrible language and I don't understand it, please help!",
      category: "backend"
  })
};

let user_id = "andrew";
let user_request = {
  queryStringParameters: JSON.stringify({user_id: "andrew"})
};

// create a request, get it, get its id, update some fields

describe('get_active_mentorship_requests', () => {
  beforeAll((done) => {
//  lambdaWrapper.init(liveFunction); // Run the deployed lambda
    done();
  });

  it('uploads a mentorship request, then checks if its correct', async () => {

    return await adder.run(request).then(async (response) => {
        const res = JSON.parse(response.body);
        delete res.id;
        expect(response).toBeDefined();
        expect(response).toHaveProperty('statusCode', 200);
        expect(JSON.parse(request.body)).toMatchObject(res);
    });
  });

  it('gets the first request, updates it, then checks if it updated', async () => {

    let result = await getter.run().then(async (response) => {
      const res = JSON.parse(response.body);
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 200);

      return {body:JSON.stringify(res[0])};
    });
    result['title'] = "this title was updated";

    return await updater.run(result).then(async (response) => {
        expect(response).toBeDefined();
        expect(response).toHaveProperty('statusCode', 200);
    });
  });

  it('gets a mentorship request by user, then checks if its correct', async () => {
    return await getter_user.run(user_request).then(async (response) => {
        const res = JSON.parse(response.body);
        expect(response).toBeDefined();
        expect(response).toHaveProperty('statusCode', 200);
        let bad_matches = res.filter(obj => obj['user_id'] != user_id);
        expect(bad_matches).toMatchObject([]);
    });
  });

});
