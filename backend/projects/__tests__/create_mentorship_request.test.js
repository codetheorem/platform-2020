'use strict';

// tests for create_mentorship_request
// Generated by serverless-jest-plugin

const mod = require('./../handler');

const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const adder = lambdaWrapper.wrap(mod, { handler: 'create_mentorship_request' });

let request = {
    body: JSON.stringify({
        title: "I need help with Java!",
        description: "Java is a terrible language and I don't understand it, please help!",
        category: "backend"
    })
};

let no_title = {
    body: JSON.stringify({
        description: "Java is a terrible language and I don't understand it, please help!",
        category: "backend"
    })
};

let no_description = {
    body: JSON.stringify({
        title: "I need help with Java!",
        category: "backend"
    })
};

let no_category = {
    body: JSON.stringify({
        title: "I need help with Java!",
        description: "Java is a terrible language and I don't understand it, please help!"
    })
};

describe('create_mentorship_request', () => {
    beforeAll((done) => {
        done();
    });

    it('uploads a mentorship request, then checks if its correct', async () => {

        return await adder.run(request).then(async (response) => {
            const res = JSON.parse(response.body);
            delete res.id;
            expect(response).toBeDefined();
            expect(response).toHaveProperty('statusCode', 200);
            expect(JSON.parse(request.body)).toMatchObject(res);
        });
    });

    it('Correctly rejects a response without a title', () => {

        return adder.run(no_title).then(async (response) => {
            expect(response).toBeDefined();
            expect(response).toHaveProperty('statusCode', 500);
        });
    });

    it('Correctly rejects a response without a description', () => {

        return adder.run(no_description).then(async (response) => {
            expect(response).toBeDefined();
            expect(response).toHaveProperty('statusCode', 500);
        });
    });

    it('Correctly rejects a response without a category', () => {

        return adder.run(no_category).then(async (response) => {
            expect(response).toBeDefined();
            expect(response).toHaveProperty('statusCode', 500);
        });
    });
});
