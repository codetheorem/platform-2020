// tests for create_project_checklist_item
// Generated by serverless-jest-plugin

const jestPlugin = require('serverless-jest-plugin');
const mod = require('../handler');

const { lambdaWrapper } = jestPlugin;
const adder = lambdaWrapper.wrap(mod, { handler: 'create_project_checklist_item' });
const getter = lambdaWrapper.wrap(mod, { handler: 'get_project_checklist_item' });
const updater = lambdaWrapper.wrap(mod, { handler: 'update_project_checklist_item' });

const request = {
  body: JSON.stringify({
    team_id: 'team_name',
    checklist_item_id: '12345',
  }),
};

const test_request = {
  queryStringParameters: { team_id: 'team_name' },
};

describe('create_project_checklist_item', () => {
  beforeAll((done) => {
    //  lambdaWrapper.init(liveFunction); // Run the deployed lambda

    done();
  });

  it('uploads a project checklist item, then checks if its correct', async () => await adder.run(request).then(async (response) => {
    const res = JSON.parse(response.body);
    delete res.id;
    delete res.is_checked;
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 200);
    expect(JSON.parse(request.body)).toMatchObject(res);
  }));

  it('gets an item by team_id, updates it, then checks if it updated', async () => {
    const result = await getter.run(test_request).then(async (response) => {
      if (response.body == '[]') throw 'nothing found that matches team_id';
      const res = JSON.parse(response.body);
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 200);

      return { body: JSON.stringify(res[0]) };
    });
    result.is_checked = true;

    return await updater.run(result).then(async (response) => {
      expect(response).toBeDefined();
      expect(response).toHaveProperty('statusCode', 200);
    });
  });
});
