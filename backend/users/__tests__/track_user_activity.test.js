// tests for track_user_activity
// Generated by serverless-jest-plugin

const jestPlugin = require('serverless-jest-plugin');
const mod = require('../handler');

const { lambdaWrapper } = jestPlugin;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'track_user_activity' });

const valid_post = {
  body: JSON.stringify({
    "user_id": "314159",
    "action": "TEST"
  }),
}

const invalid_post_no_user_id = {
  body: JSON.stringify({
    "action": "TEST" 
  }),
}

const invalid_post_no_action = {
  body: JSON.stringify({
    "user_id": "314159"
  }),
}

describe('track_user_activity', () => {
  beforeAll((done) => {
    done();
  });

  it('Valid case', async () =>

    // Check to make sure our fancy event id was returned by endpoint
    await wrapped.run(valid_post).then(async (response) => {
      expect(response).toBeDefined();
      expect(response).toMatchObject({
        body: expect.stringContaining('user_id":"314159","event":"TEST"'),
        statusCode: 200,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Credentials': true,
        },
      });
    }));

  it('Invalid case, no user_id', async () =>

    // Check to make sure our fancy event id was returned by endpoint
    await wrapped.run(invalid_post_no_action).then(async (response) => {
      expect(response).toBeDefined();
      
    }),
    );

  it('Invalid user case, no action', async () =>

    // Check to make sure our fancy event id was returned by endpoint
    await wrapped.run(invalid_post_no_user_id).then(async (response) => {
      expect(response).toBeDefined();

    }),
    );
});
