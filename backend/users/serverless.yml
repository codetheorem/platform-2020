service: platform-users

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  environment:
    BANNED_USERS_TABLE: ${file(./config/${self:provider.stage}.json):BANNED_USERS_TABLE}
    SENTRY_DSN: ${file(./config/${self:provider.stage}.json):SENTRY_DSN}
    USERS_TABLE: ${file(./config/${self:provider.stage}.json):USERS_TABLE}
    INVITES_TABLE: ${file(./config/${self:provider.stage}.json):INVITES_TABLE}
    INVITE_TEMPLATE_ID: ${file(./config/${self:provider.stage}.json):INVITE_TEMPLATE_ID}
    BASE_INVITE_URL: ${file(./config/${self:provider.stage}.json):BASE_INVITE_URL}
    SENDGRID_SECRET_NAME: ${file(./config/${self:provider.stage}.json):SENDGRID_SECRET_NAME}
    REGISTRATION_REFERRAL_TABLE: ${file(./config/${self:provider.stage}.json):REGISTRATION_REFERRAL_TABLE}
    REGISTRATION_TEMPLATE_ID: ${file(./config/${self:provider.stage}.json):REGISTRATION_TEMPLATE_ID}
    REGISTRATION_INVITE_URL: ${file(./config/${self:provider.stage}.json):REGISTRATION_INVITE_URL}
    SLACK_WEBHOOK_SECRET_NAME: ${file(./config/${self:provider.stage}.json):SLACK_WEBHOOK_SECRET_NAME}
    STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*"
    - Effect: "Allow"
      Action:
        - secretsmanager:DescribeSecret
        - secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-east-1:*"

functions:
  delete_user:
    handler: handler.delete_user
    events:
      - http: 
          path: delete_user
          method: post
          cors: true
  get_user:
    handler: handler.get_user
    events:
      - http: 
          path: get_user
          method: get
          cors: true
  add_user:
    handler: handler.add_user
    events:
      - http: 
          path: add_user
          method: post
          cors: true
  update_user:
    handler: handler.update_user
    events:
      - http: 
          path: update_user
          method: post
          cors: true
  invite_user:
    handler: handler.invite_user
    events:
      - http: 
          path: invite_user
          method: post
          cors: true
  ban_user:
    handler: handler.ban_user
    description: Adds user to banned table
    events:
      - http: 
          path: ban_user
          method: post
          cors: true
  get_banned_users:
    handler: handler.get_banned_users
    description: Retreives all users marked as 'banned'
    events:
      - http:
          path: get_banned_users
          method: get
          cors: true
  send_registration_email:
    handler: handler.send_registration_email
    description: Sends a registration confirmation email with a referral link
    events:
      - http:
          path: send_registration_email
          method: post
          cors: true
  find_user_by_email:
    handler: handler.find_user_by_email
    description: Finds the first user with that email address and returns them
    events:
      - http:
          path: find_user_by_email
          method: get
          cors: true

          
plugins:
  - serverless-sentry
  - serverless-jest-plugin

custom:
  sentry:
    dsn: ${file(./config/${self:provider.stage}.json):SENTRY_DSN}

  # see https://github.com/nordcloud/serverless-jest-plugin
  jest:
    collectCoverage: true